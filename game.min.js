const mainScreenEl = document.querySelector("main"), introScreenEl = document.querySelector("#intro"), 
settingsEl = document.querySelector("#settings"), boardEl = document.querySelector("#board"), difficultyEl = document.querySelector("#difficulty"), 
correctEl = document.querySelector("#correct"), scoreEl = document.querySelector("#score"), multiplyerEl = document.querySelector("#multiplyer"), 
resetBtn = document.querySelector("#reset"), restartBtn = document.querySelector("#restart"), gameState = { currentDifficulty: "easy", totalTiles: "12" }, 
difficulty = { easy: 12, medium: 24, hard: 36 }; let correct = 0, score = 0, multiplyer = 0; const setScore = function (e = !0) 
{ e ? score += 1 * multiplyer : score = 0, scoreEl.innerText = `Score: ${score}` }, setMultiplyer = function (e = !0) 
{ e ? multiplyer++ : multiplyer = 1, multiplyerEl.innerText = `Multiplyer: ${multiplyer}` }, setCorrect = function (e = !0) 
{ e ? correct++ : correct = 0, correctEl.innerText = `Correct: ${correct}/${gameState.totalTiles / 2}` }; let board = {}; 
const generateBoardTiles = function (e) { let t = [], r = e / 6, l = 1; for (let i = 1; i <= e; i++)t.push(l), i % r == 0 && l++; let c = function () 
{ return Math.floor(10 * Math.random()) + 1 > 5 ? -1 : 1 }; return t.sort(c) }, clearBoard = function () { board = {}, boardEl.innerHTML = "" }, 
populateBoard = function (e) { clearBoard(); let t = generateBoardTiles(difficulty[e]); for (let r = 1; r <= t.length; r++)board[`tile${r}`] = t[r - 1]; 
for (let l of Object.keys(board)) { let i = document.createElement("button"), c = ["tile", l, "blank"]; i.classList.add(...c), boardEl.appendChild(i) } 
boardEl.classList.add(`${e}`), difficultyEl.innerText = `Difficulty: ${e}` }, flipTile = function (e, t = !1) { let r = `pic${board[e.classList[1]]}`; 
e.classList.contains("blank") ? (e.classList.remove("blank"), e.classList.add(r)) : !e.classList.contains("blank") && t && (e.classList.remove(r), 
e.classList.add("blank")) }, matchPairs = function (e, t) { e.classList[2] === t.classList[2] ? (console.log("A Match!"), e.disabled = !0, t.disabled = !0, 
etMultiplyer(), setScore(), setCorrect()) : (setMultiplyer(!1), setTimeout(function () { flipTile(e, !0), flipTile(t, !0) }, 1500)) }, restartBoard = function () 
{ setCorrect(!1), setScore(!1), populateBoard(gameState.currentDifficulty) }, runGameLogic = function () { let e = document.querySelectorAll(".tile"), t = []; 
for (let r of e) r.addEventListener("click", function () { flipTile(this), t.push(this), 2 === t.length && (matchPairs(t[0], t[1]), t.splice(0, 2)), 
    correct === gameState.totalTiles / 2 && setTimeout(function () { restartBoard(), runGameLogic() }, 2e3) }) }, changeScreenState = function (e) 
    { introScreenEl.classList.toggle("hidden"), mainScreenEl.classList.toggle("hidden") }, setDifficulty = function (e) { e.preventDefault(), 
        gameState.currentDifficulty = e.target.elements.difficulty.value, gameState.totalTiles = difficulty[gameState.currentDifficulty], changeScreenState(!0), 
        populateBoard(gameState.currentDifficulty), runGameLogic() }; settingsEl.addEventListener("submit", setDifficulty), 
        restartBtn.addEventListener("click", function () { restartBoard(), runGameLogic() });